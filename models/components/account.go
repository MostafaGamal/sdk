// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/MostafaGamal/sdk/internal/utils"
	"github.com/MostafaGamal/sdk/types"
	"time"
)

// AccountStatus - Status of the account.
type AccountStatus string

const (
	AccountStatusActive   AccountStatus = "active"
	AccountStatusInactive AccountStatus = "inactive"
)

func (e AccountStatus) ToPointer() *AccountStatus {
	return &e
}
func (e *AccountStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = AccountStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountStatus: %v", v)
	}
}

// AccountType - Type of the account.
type AccountType string

const (
	AccountTypeAccount    AccountType = "account"
	AccountTypeBonus      AccountType = "bonus"
	AccountTypeCard       AccountType = "card"
	AccountTypeChecking   AccountType = "checking"
	AccountTypeCredit     AccountType = "credit"
	AccountTypeCreditCard AccountType = "credit_card"
	AccountTypeDebitCard  AccountType = "debit_card"
	AccountTypeEwallet    AccountType = "ewallet"
	AccountTypeInsurance  AccountType = "insurance"
	AccountTypeInvestment AccountType = "investment"
	AccountTypeLoan       AccountType = "loan"
	AccountTypeMortgage   AccountType = "mortgage"
	AccountTypeSavings    AccountType = "savings"
)

func (e AccountType) ToPointer() *AccountType {
	return &e
}
func (e *AccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "bonus":
		fallthrough
	case "card":
		fallthrough
	case "checking":
		fallthrough
	case "credit":
		fallthrough
	case "credit_card":
		fallthrough
	case "debit_card":
		fallthrough
	case "ewallet":
		fallthrough
	case "insurance":
		fallthrough
	case "investment":
		fallthrough
	case "loan":
		fallthrough
	case "mortgage":
		fallthrough
	case "savings":
		*e = AccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountType: %v", v)
	}
}

// CardType - Type of the card account.
type CardType string

const (
	CardTypeAmericanExpress CardType = "american_express"
	CardTypeChinaUnionpay   CardType = "china_unionpay"
	CardTypeDinersClub      CardType = "diners_club"
	CardTypeJcb             CardType = "jcb"
	CardTypeMaestro         CardType = "maestro"
	CardTypeMasterCard      CardType = "master_card"
	CardTypeUatp            CardType = "uatp"
	CardTypeVisa            CardType = "visa"
	CardTypeMir             CardType = "mir"
)

func (e CardType) ToPointer() *CardType {
	return &e
}
func (e *CardType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "american_express":
		fallthrough
	case "china_unionpay":
		fallthrough
	case "diners_club":
		fallthrough
	case "jcb":
		fallthrough
	case "maestro":
		fallthrough
	case "master_card":
		fallthrough
	case "uatp":
		fallthrough
	case "visa":
		fallthrough
	case "mir":
		*e = CardType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CardType: %v", v)
	}
}

// Optional data associated with the account.<br /><br /><strong>Note:</strong> `optional` parameter will always be present, but the array may be empty, or it may contain all or some of the parameters listed below.
type Optional struct {
	// International Bank Account Number.
	Iban *string `json:"iban,omitempty"`
	// Basic Bank Account Number.
	Bban *string `json:"bban,omitempty"`
	// Sorting/routing code.
	SortCode *string `json:"sort_code,omitempty"`
	// Institution's SWIFT code.
	SwiftCode *string `json:"swift_code,omitempty"`
	// Status of the account.
	Status *AccountStatus `json:"status,omitempty"`
	// Type of the balance.
	BalanceType *string `json:"balance_type,omitempty"`
	// Type of the account.
	AccountType *AccountType `json:"account_type,omitempty"`
	// Type of the card account.
	CardType *CardType `json:"card_type,omitempty"`
	// Payment card numbers.
	CardNumbers []string `json:"card_numbers,omitempty"`
	// Account name assigned by the bank.
	SourceName *string `json:"source_name,omitempty"`
	// The last date when the bank updated the account/balance.
	SourceDate *types.Date `json:"source_date,omitempty"`
	// The last time when the bank updated the account/balance.
	SourceTime *string `json:"source_time,omitempty"`
	// Account number assigned by the bank.
	SourceAccountNumber *string `json:"source_account_number,omitempty"`
	// The available amount of funds in the account's currency.
	AvailableAmount *float32 `json:"available_amount,omitempty"`
	// The blocked amount of funds in the account's currency.
	BlockedAmount *float32 `json:"blocked_amount,omitempty"`
	// The maximum amount of funds that the user can spend.
	CreditLimit *float32 `json:"credit_limit,omitempty"`
	// Closing balance.
	ClosingBalance *float32 `json:"closing_balance,omitempty"`
	// Opening balance.
	OpeningBalance *float32 `json:"opening_balance,omitempty"`
	// User's name.
	ClientName []string `json:"client_name,omitempty"`
	// The date when the account/card was opened.
	OpenDate *types.Date `json:"open_date,omitempty"`
	// Card's expiration date.
	ExpiryDate *types.Date `json:"expiry_date,omitempty"`
}

func (o Optional) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Optional) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Optional) GetIban() *string {
	if o == nil {
		return nil
	}
	return o.Iban
}

func (o *Optional) GetBban() *string {
	if o == nil {
		return nil
	}
	return o.Bban
}

func (o *Optional) GetSortCode() *string {
	if o == nil {
		return nil
	}
	return o.SortCode
}

func (o *Optional) GetSwiftCode() *string {
	if o == nil {
		return nil
	}
	return o.SwiftCode
}

func (o *Optional) GetStatus() *AccountStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Optional) GetBalanceType() *string {
	if o == nil {
		return nil
	}
	return o.BalanceType
}

func (o *Optional) GetAccountType() *AccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *Optional) GetCardType() *CardType {
	if o == nil {
		return nil
	}
	return o.CardType
}

func (o *Optional) GetCardNumbers() []string {
	if o == nil {
		return nil
	}
	return o.CardNumbers
}

func (o *Optional) GetSourceName() *string {
	if o == nil {
		return nil
	}
	return o.SourceName
}

func (o *Optional) GetSourceDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.SourceDate
}

func (o *Optional) GetSourceTime() *string {
	if o == nil {
		return nil
	}
	return o.SourceTime
}

func (o *Optional) GetSourceAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountNumber
}

func (o *Optional) GetAvailableAmount() *float32 {
	if o == nil {
		return nil
	}
	return o.AvailableAmount
}

func (o *Optional) GetBlockedAmount() *float32 {
	if o == nil {
		return nil
	}
	return o.BlockedAmount
}

func (o *Optional) GetCreditLimit() *float32 {
	if o == nil {
		return nil
	}
	return o.CreditLimit
}

func (o *Optional) GetClosingBalance() *float32 {
	if o == nil {
		return nil
	}
	return o.ClosingBalance
}

func (o *Optional) GetOpeningBalance() *float32 {
	if o == nil {
		return nil
	}
	return o.OpeningBalance
}

func (o *Optional) GetClientName() []string {
	if o == nil {
		return nil
	}
	return o.ClientName
}

func (o *Optional) GetOpenDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.OpenDate
}

func (o *Optional) GetExpiryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

type Account struct {
	// The `id` of the account.
	ID *int64 `json:"id,omitempty"`
	// The `id` of the connection to which the account is associated.
	ConnectionID *int64 `json:"connection_id,omitempty"`
	// The code of the currency in <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO 4217</a> format.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// The unique name of the account.
	Name *string `json:"name,omitempty"`
	// The current balance of the account.
	Balance *float32 `json:"balance,omitempty"`
	// Whether the account's data was imported fully or partially. The account's data may be imported partially due to some internal error on the institution's side.
	IsPartial *bool `json:"is_partial,omitempty"`
	// Optional data associated with the account.<br /><br /><strong>Note:</strong> `optional` parameter will always be present, but the array may be empty, or it may contain all or some of the parameters listed below.
	Optional *Optional `json:"optional,omitempty"`
	// The timestamp when the account's data was fetched for the first time, in RFC 3339 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The timestamp when the account's data was last updated, in RFC 3339 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (a Account) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Account) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Account) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Account) GetConnectionID() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectionID
}

func (o *Account) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *Account) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Account) GetBalance() *float32 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *Account) GetIsPartial() *bool {
	if o == nil {
		return nil
	}
	return o.IsPartial
}

func (o *Account) GetOptional() *Optional {
	if o == nil {
		return nil
	}
	return o.Optional
}

func (o *Account) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Account) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
