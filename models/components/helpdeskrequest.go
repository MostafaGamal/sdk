// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeBusinessInquiry Type = "Business Inquiry"
	TypeSupportInquiry  Type = "Support Inquiry"
	TypeConnectionIssue Type = "Connection Issue"
	TypeOtherInquiry    Type = "Other Inquiry"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Business Inquiry":
		fallthrough
	case "Support Inquiry":
		fallthrough
	case "Connection Issue":
		fallthrough
	case "Other Inquiry":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type HelpDeskRequest struct {
	Subject *string `json:"subject,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *Type   `json:"type,omitempty"`
}

func (o *HelpDeskRequest) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *HelpDeskRequest) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *HelpDeskRequest) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
